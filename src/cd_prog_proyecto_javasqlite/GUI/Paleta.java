package cd_prog_proyecto_javasqlite.GUI;

import cd_prog_proyecto_javasqlite.metodosSQL.*;
import cd_prog_proyecto_javasqlite.objectosTablas.*;
import java.awt.CardLayout;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aperezcesar
 */
public class Paleta extends javax.swing.JFrame {

    /**
     * Creates new form Paleta
     */
    Consultas query = new Consultas();
    Borrados del = new Borrados();
    Inserciones ins = new Inserciones();
    Actualizaciones upd = new Actualizaciones();

    /**
     * Ejecuta la GUI
     */
    public Paleta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        BaseDatos = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        lTitulo = new javax.swing.JLabel();
        bSelectAll = new javax.swing.JButton();
        desc1 = new javax.swing.JLabel();
        bInsert = new javax.swing.JButton();
        desc2 = new javax.swing.JLabel();
        bDelete = new javax.swing.JButton();
        desc3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        bSelect = new javax.swing.JButton();
        desc4 = new javax.swing.JLabel();
        bUpdate = new javax.swing.JButton();
        desc6 = new javax.swing.JLabel();
        bLimpiar = new javax.swing.JButton();
        cTexto5 = new javax.swing.JTextField();
        desc11 = new javax.swing.JLabel();
        desc12 = new javax.swing.JLabel();
        cTexto6 = new javax.swing.JTextField();
        desc13 = new javax.swing.JLabel();
        cTexto7 = new javax.swing.JTextField();
        desc14 = new javax.swing.JLabel();
        cTexto8 = new javax.swing.JTextField();
        desc15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        comboSelect = new javax.swing.JComboBox<>();
        desc7 = new javax.swing.JLabel();
        cTexto1 = new javax.swing.JTextField();
        rbSelect = new javax.swing.JRadioButton();
        rbUpdate = new javax.swing.JRadioButton();
        desc8 = new javax.swing.JLabel();
        desc9 = new javax.swing.JLabel();
        desc10 = new javax.swing.JLabel();
        cTexto2 = new javax.swing.JTextField();
        cTexto3 = new javax.swing.JTextField();
        cTexto4 = new javax.swing.JTextField();
        bAceptar = new javax.swing.JButton();
        comboUpdate = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPaises = new javax.swing.JTable();
        bVerPaises = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        jButton2.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROYECTO BASE DE DATOS");
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Referencia", "Nombre", "Nota", "Id_pais"
            }
        ));
        BaseDatos.setViewportView(tablaAlumnos);

        lTitulo.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        lTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitulo.setText("PROYECTO BASE DE DATOS");

        bSelectAll.setText("Select all");
        bSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectAllActionPerformed(evt);
            }
        });

        desc1.setText("Muestra el contenido de la tabla");

        bInsert.setText("Insert");
        bInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertActionPerformed(evt);
            }
        });

        desc2.setText("Añade un registro a una tabla");

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        desc3.setText("Borra un registro de una tabla");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        bSelect.setText("Select");
        bSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectActionPerformed(evt);
            }
        });

        desc4.setText("Buscar un registro de la tabla");

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        desc6.setText("Actualizar un registro de la tabla");

        bLimpiar.setText("Limpiar tabla");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        desc11.setText("Referencia:");

        desc12.setText("Nombre: ");

        desc13.setText("Nota:");

        desc14.setText("Id. país:");

        desc15.setForeground(new java.awt.Color(255, 0, 0));
        desc15.setText("Delete = referencia || Insert = todos los campos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BaseDatos, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(desc6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(desc2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(desc3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(desc1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(desc4, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bLimpiar)
                        .addGap(133, 133, 133)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(desc15, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desc11)
                    .addComponent(desc12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cTexto5, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(cTexto6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(desc13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cTexto7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(desc14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cTexto8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bSelectAll)
                                    .addComponent(desc1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bInsert)
                                    .addComponent(desc2))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bDelete)
                                    .addComponent(desc3)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bSelect)
                            .addComponent(desc4)))
                    .addComponent(bLimpiar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bUpdate)
                    .addComponent(desc6))
                .addGap(21, 21, 21)
                .addComponent(desc15)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cTexto5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desc11)
                    .addComponent(desc13)
                    .addComponent(cTexto7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desc12)
                    .addComponent(cTexto6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desc14)
                    .addComponent(cTexto8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(BaseDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        getContentPane().add(jPanel1, "card1");

        comboSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Nota", "Id_pais", "Referencia" }));
        comboSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelectActionPerformed(evt);
            }
        });

        desc7.setText("Referencia:");

        rbSelect.setText("Select");
        rbSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSelectActionPerformed(evt);
            }
        });

        rbUpdate.setText("Update");
        rbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbUpdateActionPerformed(evt);
            }
        });

        desc8.setText("Nombre:");

        desc9.setText("Id. país:");

        desc10.setText("Nota:");

        bAceptar.setText("Aceptar");
        bAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAceptarActionPerformed(evt);
            }
        });

        comboUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Nota", "Id_pais", "Todo" }));
        comboUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUpdateActionPerformed(evt);
            }
        });

        tablaPaises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Id_pais", "Nombre_pais"
            }
        ));
        jScrollPane2.setViewportView(tablaPaises);

        bVerPaises.setText("Ver lista ids de países");
        bVerPaises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerPaisesActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(rbSelect)
                .addGap(40, 40, 40)
                .addComponent(comboSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241)
                .addComponent(rbUpdate)
                .addGap(37, 37, 37)
                .addComponent(comboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desc7)
                    .addComponent(desc10)
                    .addComponent(desc9)
                    .addComponent(desc8))
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cTexto1)
                    .addComponent(cTexto2)
                    .addComponent(cTexto3)
                    .addComponent(cTexto4, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(bAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bVerPaises)
                .addGap(102, 102, 102))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboSelect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rbUpdate)
                                .addComponent(comboUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rbSelect)))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(desc7)
                            .addComponent(cTexto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(desc8)
                            .addComponent(cTexto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(desc10)
                            .addComponent(cTexto3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(desc9)
                            .addComponent(cTexto4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bVerPaises)
                    .addComponent(bAceptar))
                .addGap(54, 54, 54)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        getContentPane().add(jPanel2, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertActionPerformed
        try {
            //Si encuentra la misma referencia, salta la excepcion y no deja insertar nuevas filas
            int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto5.getText()));

            if (!Metodos.validarNombre(cTexto6.getText())) {
                jTextArea1.setText("ERROR: Introduzca un nombre válido.");
            } else if (!Metodos.validarNota(Integer.parseInt(cTexto7.getText()))) {
                jTextArea1.setText("ERROR: Introduzca una nota válida.");
            } else if (!Metodos.validarPais(Integer.parseInt(cTexto8.getText()))) {
                jTextArea1.setText("ERROR: Introduzca una ID válida");
            } else if (cTexto5.getText().isEmpty() || cTexto6.getText().isEmpty() || cTexto7.getText().isEmpty() || cTexto8.getText().isEmpty()) { //ver si algun campo esta vacio
                jTextArea1.setText("Por favor, rellene todos los campos");
            } else if (cont > 0) {
                jTextArea1.setText("Ya existe un alumno con esa referencia");
            } else {
                ins.insert(Integer.parseInt(cTexto5.getText()), cTexto6.getText(), Integer.parseInt(cTexto7.getText()), Integer.parseInt(cTexto8.getText()));
                jTextArea1.setText("Se ha añadido 1 fila");
                actualizarTablaAlumnos();
            }
        } catch (NumberFormatException nfe) {
            jTextArea1.setText("ERROR: Introduzca solo numeros.");
        }
    }//GEN-LAST:event_bInsertActionPerformed

    private void bSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectAllActionPerformed
        actualizarTablaAlumnos();
        jTextArea1.setText("");
    }//GEN-LAST:event_bSelectAllActionPerformed

    /**
     * Muestra todos los datos recopilados de la tabla "alumnos": referencia,
     * nombre, nota e id_pais. Se invoca para actualizar los datos de esta una
     * vez se haya realizado una inserción, actualización, borrado, etc. de la
     * tabla.
     */
    private void actualizarTablaAlumnos() {
        DefaultTableModel dtm = (DefaultTableModel) tablaAlumnos.getModel();
        Object[] alumnos = new Object[4];

        if (dtm.getRowCount() > 1) {
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
            }
        }

        limpiarTablaAlumnos();
        for (int i = 0; i < query.selectAlumnos().size(); i++) {

            alumnos[0] = ((Alumno) (query.selectAlumnos().get(i))).getReferencia();
            alumnos[1] = ((Alumno) (query.selectAlumnos().get(i))).getNombre();
            alumnos[2] = ((Alumno) (query.selectAlumnos().get(i))).getNota();
            alumnos[3] = ((Alumno) (query.selectAlumnos().get(i))).getId_pais();

            if (dtm.getRowCount() < query.selectAlumnos().size()) {
                dtm.addRow(alumnos);
            }
        }
    }

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        try {
            int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto5.getText()));

            if (!cTexto6.getText().isEmpty() || !cTexto7.getText().isEmpty() || !cTexto8.getText().isEmpty()) { //si los otros campos no estan vacios...
                jTextArea1.setText("ERROR: Introduzca solo la referencia");
            } else if (cont == 0) {
                jTextArea1.setText("No existe ningún alumno con esa referencia");
            } else {
                del.delete(Integer.parseInt(cTexto5.getText()));
                jTextArea1.setText("Se ha(n) eliminado " + cont + " fila(s)");
                actualizarTablaAlumnos();
            }
        } catch (NumberFormatException nfe) {
            jTextArea1.setText("ERROR: Introduzca solo números.");
        }
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectActionPerformed
        CardLayout card = (CardLayout) getContentPane().getLayout();
        card.show(getContentPane(), "card2"); //cambia a la segunda ventana y la muestra
        rbSelect.setSelected(true); //activa automaticamente la opcion de select
        rbUpdate.setSelected(false); //desactiva la de update
    }//GEN-LAST:event_bSelectActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        CardLayout card = (CardLayout) getContentPane().getLayout();
        card.show(getContentPane(), "card2"); //cambia a la segunda ventana y la muestra
        rbUpdate.setSelected(true); //activa automaticamente la opcion de update
        rbSelect.setSelected(false); //desactiva la de select
    }//GEN-LAST:event_bUpdateActionPerformed

    private void comboSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelectActionPerformed
        JComboBox jComboBox1 = (JComboBox) evt.getSource(); //obtener accion realizada
        Object selected1 = jComboBox1.getSelectedItem(); //obtener opcion escogida

        /*dependiendo de la opcion escogida del desplegable, desactiva unos campos u otros, para
        que el usuario no pueda introducir unos campos que no estan permitidos*/
        switch (selected1.toString()) {
            case "Nombre":
                cTexto1.setEnabled(false);
                cTexto2.setEnabled(true);
                cTexto3.setEnabled(false);
                cTexto4.setEnabled(false);
                break;
            case "Nota":
                cTexto1.setEnabled(false);
                cTexto2.setEnabled(false);
                cTexto3.setEnabled(true);
                cTexto4.setEnabled(false);
                break;
            case "Id_pais":
                cTexto1.setEnabled(false);
                cTexto2.setEnabled(false);
                cTexto3.setEnabled(false);
                cTexto4.setEnabled(true);
                break;
            case "Referencia":
                cTexto1.setEnabled(true);
                cTexto2.setEnabled(false);
                cTexto3.setEnabled(false);
                cTexto4.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_comboSelectActionPerformed

    private void rbSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSelectActionPerformed
        JRadioButton jRadioButton1 = (JRadioButton) evt.getSource();

        if (jRadioButton1.isSelected()) { //opcion select
            comboUpdate.setEnabled(false);

        } else {
            comboUpdate.setEnabled(true);
            cTexto1.setEnabled(true);
            cTexto2.setEnabled(true);
            cTexto3.setEnabled(true);
            cTexto4.setEnabled(true);
        }
    }//GEN-LAST:event_rbSelectActionPerformed

    private void rbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbUpdateActionPerformed
        JRadioButton jRadioButton2 = (JRadioButton) evt.getSource();

        if (jRadioButton2.isSelected()) {
            comboSelect.setEnabled(false);

        } else {
            comboSelect.setEnabled(true);
            cTexto1.setEnabled(true);
            cTexto2.setEnabled(true);
            cTexto3.setEnabled(true);
            cTexto4.setEnabled(true);
        }
    }//GEN-LAST:event_rbUpdateActionPerformed

    private void comboUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUpdateActionPerformed
        JComboBox jComboBox2 = (JComboBox) evt.getSource();
        Object selected2 = jComboBox2.getSelectedItem();

        //segun la opcion elegida, activa o desactiva los campos pertinentes
        switch (selected2.toString()) {
            case "Nombre":
                cTexto1.setEnabled(true);
                cTexto2.setEnabled(true);
                cTexto3.setEnabled(false);
                cTexto4.setEnabled(false);
                break;
            case "Nota":
                cTexto1.setEnabled(true);
                cTexto2.setEnabled(false);
                cTexto3.setEnabled(true);
                cTexto4.setEnabled(false);
                break;
            case "Id_pais":
                cTexto1.setEnabled(true);
                cTexto2.setEnabled(false);
                cTexto3.setEnabled(false);
                cTexto4.setEnabled(true);
                break;
            case "Todo":
                cTexto1.setEnabled(true);
                cTexto2.setEnabled(true);
                cTexto3.setEnabled(true);
                cTexto4.setEnabled(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_comboUpdateActionPerformed
    /**
     * Borra todo el contenido de la tabla "alumnos"
     */
    private void limpiarTablaAlumnos() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) tablaAlumnos.getModel();

            int rowCount = dtm.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                dtm.removeRow(0);
            }

        } catch (Exception e) {
            jTextArea1.setText("No se pudo limpiar la tabla");
        }
    }

    private void bAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAceptarActionPerformed
        CardLayout card = (CardLayout) getContentPane().getLayout();

        Object selected1 = comboSelect.getSelectedItem();
        Object selected2 = comboUpdate.getSelectedItem();
        DefaultTableModel dtm = (DefaultTableModel) tablaAlumnos.getModel();
        Object[] alumnos = new Object[4];
        int contador = 0;

        if (rbSelect.isSelected()) {
            if (selected1.toString().equalsIgnoreCase("nombre")) {
                if (dtm.getRowCount() > 1) {
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        dtm.removeRow(i);
                    }
                }

                limpiarTablaAlumnos();
                for (int i = 0; i < query.selectNombre(cTexto2.getText()).size(); i++) {
                    alumnos[0] = ((Alumno) (query.selectNombre(cTexto2.getText()).get(i))).getReferencia();
                    alumnos[1] = ((Alumno) (query.selectNombre(cTexto2.getText()).get(i))).getNombre();
                    alumnos[2] = ((Alumno) (query.selectNombre(cTexto2.getText()).get(i))).getNota();
                    alumnos[3] = ((Alumno) (query.selectNombre(cTexto2.getText()).get(i))).getId_pais();

                    contador++;

                    if (dtm.getRowCount() < query.selectNombre(cTexto2.getText()).size()) {
                        dtm.addRow(alumnos);
                    }
                }

                if (cTexto2.getText().isEmpty()) { //limitaciones
                    jTextArea2.setText("ERROR: Rellene todos los campos");
                } else if (!Metodos.validarNombre(cTexto2.getText())) {
                    jTextArea2.setText("ERROR: Introduzca un nombre válido");
                } else if (contador > 0) { //resultados
                    card.show(getContentPane(), "card1"); //muestra la primera ventana
                    jTextArea1.setText("Se ha(n) encontrado un total de " + contador + " resultado(s)");;
                } else { //excepcion
                    card.show(getContentPane(), "card1"); //muestra la primera ventana
                    jTextArea1.setText("No hay resultados");
                }

            } else if (selected1.toString().equalsIgnoreCase("nota")) {
                try {
                    if (dtm.getRowCount() > 1) {
                        for (int i = 0; i < dtm.getRowCount(); i++) {
                            dtm.removeRow(i);
                        }
                    }

                    limpiarTablaAlumnos();
                    for (int i = 0; i < query.selectNota(Integer.parseInt(cTexto3.getText())).size(); i++) {

                        alumnos[0] = ((Alumno) (query.selectNota(Integer.parseInt(cTexto3.getText())).get(i))).getReferencia();
                        alumnos[1] = ((Alumno) (query.selectNota(Integer.parseInt(cTexto3.getText())).get(i))).getNombre();
                        alumnos[2] = ((Alumno) (query.selectNota(Integer.parseInt(cTexto3.getText())).get(i))).getNota();
                        alumnos[3] = ((Alumno) (query.selectNota(Integer.parseInt(cTexto3.getText())).get(i))).getId_pais();
                        contador++;

                        if (dtm.getRowCount() < query.selectNota(Integer.parseInt(cTexto3.getText())).size()) {
                            dtm.addRow(alumnos);
                        }
                    }

                    if (cTexto3.getText().isEmpty()) { //limitaciones
                        jTextArea2.setText("ERROR: Rellene todos los campos");
                    } else if (!Metodos.validarNota(Integer.parseInt(cTexto3.getText()))) {
                        jTextArea2.setText("ERROR: Introducir una nota válida (del 1 al 10).");
                    } else if (contador == 0) { //resultados
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        jTextArea1.setText("No se encontraron resultados.");
                    } else {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        jTextArea1.setText("Se encontraron un total de " + contador + " resultados");
                    }
                } catch (NumberFormatException nfe) { //excepciones
                    jTextArea2.setText("ERROR: Introduzca una nota válida.");
                }

            } else if (selected1.toString().equalsIgnoreCase("id_pais")) {
                try {
                    if (dtm.getRowCount() > 1) {
                        for (int i = 0; i < dtm.getRowCount(); i++) {
                            dtm.removeRow(i);
                        }
                    }

                    limpiarTablaAlumnos();
                    for (int i = 0; i < query.selectId_pais(Integer.parseInt(cTexto4.getText())).size(); i++) {
                        alumnos[0] = ((Alumno) (query.selectId_pais(Integer.parseInt(cTexto4.getText())).get(i))).getReferencia();
                        alumnos[1] = ((Alumno) (query.selectId_pais(Integer.parseInt(cTexto4.getText())).get(i))).getNombre();
                        alumnos[2] = ((Alumno) (query.selectId_pais(Integer.parseInt(cTexto4.getText())).get(i))).getNota();
                        alumnos[3] = ((Alumno) (query.selectId_pais(Integer.parseInt(cTexto4.getText())).get(i))).getId_pais();

                        contador++;

                        if (dtm.getRowCount() < query.selectId_pais(Integer.parseInt(cTexto4.getText())).size()) {
                            dtm.addRow(alumnos);
                        }

                        if (cTexto4.getText().isEmpty()) { //limitaciones
                            jTextArea2.setText("ERROR: Rellene todos los campos");
                        } else if (!Metodos.validarPais(Integer.parseInt(cTexto4.getText()))) {
                            jTextArea2.setText("ERROR: Introduzca una ID válida");
                        } else if (contador == 0) { //resultados
                            card.show(getContentPane(), "card1"); //muestra la primera ventana
                            jTextArea1.setText("No se encontraron resultados.");
                        } else {
                            card.show(getContentPane(), "card1"); //muestra la primera ventana
                            jTextArea1.setText("Se encontraron un total de " + contador + " resultados");
                        }
                    }
                } catch (NumberFormatException nfe) { //excepciones
                    jTextArea2.setText("ERROR: Introduzca una ID válida.");
                }

            } else if (selected1.toString().equalsIgnoreCase("referencia")) {
                try {
                    if (dtm.getRowCount() > 1) {
                        for (int i = 0; i < dtm.getRowCount(); i++) {
                            dtm.removeRow(i);
                        }
                    }

                    limpiarTablaAlumnos();
                    for (int i = 0; i < query.selectReferencia(Integer.parseInt(cTexto1.getText())).size(); i++) {
                        alumnos[0] = ((Alumno) (query.selectReferencia(Integer.parseInt(cTexto1.getText())).get(i))).getReferencia();
                        alumnos[1] = ((Alumno) (query.selectReferencia(Integer.parseInt(cTexto1.getText())).get(i))).getNombre();
                        alumnos[2] = ((Alumno) (query.selectReferencia(Integer.parseInt(cTexto1.getText())).get(i))).getNota();
                        alumnos[3] = ((Alumno) (query.selectReferencia(Integer.parseInt(cTexto1.getText())).get(i))).getId_pais();

                        contador++;

                        if (dtm.getRowCount() < query.selectReferencia(Integer.parseInt(cTexto1.getText())).size()) {
                            dtm.addRow(alumnos);
                        }

                        if (cTexto1.getText().isEmpty()) { //limitaciones
                            jTextArea2.setText("ERROR: Rellene todos los campos");
                        } else if (contador == 0) { //resultados
                            card.show(getContentPane(), "card1"); //muestra la primera ventana
                            jTextArea1.setText("No se encontraron resultados.");
                        } else {
                            card.show(getContentPane(), "card1"); //muestra la primera ventana
                            jTextArea1.setText("Se encontraron un total de " + contador + " resultados");
                        }
                    }
                } catch (NumberFormatException nfe) { //excepciones
                    jTextArea2.setText("ERROR: Introduzca solo numeros.");
                }
            }

        } else if (rbUpdate.isSelected()) {
            if (selected2.toString().equalsIgnoreCase("nombre")) {
                //Si no encuentra la referencia, salta la excepcion y no deja actualizar la base de datos
                int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto1.getText()));

                if (cTexto1.getText().isEmpty() || cTexto2.getText().isEmpty()) {
                    jTextArea2.setText("ERROR: Rellene todos los campos");
                } else if (!Metodos.validarNombre(cTexto2.getText())) {
                    jTextArea2.setText("ERROR: Introduzca un nombre válido");
                } else if (cont == 0) {
                    card.show(getContentPane(), "card1"); //muestra la primera ventana
                    jTextArea1.setText("No existe esa referencia");
                } else {
                    card.show(getContentPane(), "card1"); //muestra la primera ventana
                    upd.updateNombre(cTexto2.getText(), Integer.parseInt(cTexto1.getText()));
                    jTextArea1.setText("Se ha(n) actualizado " + cont + " fila(s).");
                    actualizarTablaAlumnos();
                }

            } else if (selected2.toString().equalsIgnoreCase("nota")) {
                try {
                    int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto1.getText()));

                    if (cTexto1.getText().isEmpty() || cTexto3.getText().isEmpty()) {
                        jTextArea2.setText("ERROR: Rellene todos los campos");
                    } else if (!Metodos.validarNota(Integer.parseInt(cTexto3.getText()))) {
                        jTextArea2.setText("ERROR: Introduzca una nota válida (del 1 al 10)");
                    } else if (cont == 0) {
                        card.show(getContentPane(), "card1");
                        jTextArea1.setText("No existe esa referencia");
                    } else {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        upd.updateNota(Integer.parseInt(cTexto3.getText()), Integer.parseInt(cTexto1.getText()));
                        jTextArea1.setText("Se ha(n) actualizado " + cont + " fila(s).");
                        actualizarTablaAlumnos();
                    }
                } catch (NumberFormatException nfe) {
                    card.show(getContentPane(), "card1"); //muestra la primera ventana
                    jTextArea1.setText("ERROR: Introduzca solo numeros.");
                }

            } else if (selected2.toString().equalsIgnoreCase("id_pais")) {
                try {
                    int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto1.getText()));

                    if (cTexto1.getText().isEmpty() || cTexto4.getText().isEmpty()) {
                        jTextArea2.setText("ERROR: Rellene todos los campos");
                    } else if (!Metodos.validarPais(Integer.parseInt(cTexto4.getText()))) {
                        jTextArea2.setText("ERROR: Introduzca una ID válida");
                    } else if (cont == 0) {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        jTextArea1.setText("No existe esa referencia");
                    } else {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        upd.updateId_Pais(Integer.parseInt(cTexto4.getText()), Integer.parseInt(cTexto1.getText()));
                        jTextArea1.setText("Se ha(n) actualizado " + cont + " fila(s).");
                        actualizarTablaAlumnos();
                    }
                } catch (NumberFormatException nfe) {
                    jTextArea1.setText("ERROR: Introduzca solo numeros.");
                }

            } else if (selected2.toString().equalsIgnoreCase("todo")) {
                try {
                    int cont = Metodos.buscarCoincidencias(Integer.parseInt(cTexto1.getText()));

                    if (cTexto1.getText().isEmpty() || cTexto2.getText().isEmpty() || cTexto3.getText().isEmpty() || cTexto4.getText().isEmpty()) {
                        jTextArea2.setText("ERROR: Rellene todos los campos");
                    } else if (!Metodos.validarNombre(cTexto2.getText())) {
                        jTextArea2.setText("ERROR: Introduzca un nombre válido");
                    } else if (!Metodos.validarNota(Integer.parseInt(cTexto3.getText()))) {
                        jTextArea2.setText("ERROR: Introduzca una nota válida (del 1 al 10)");
                    } else if (!Metodos.validarPais(Integer.parseInt(cTexto4.getText()))) {
                        jTextArea2.setText("ERROR: Introduzca una ID válida");
                    } else if (cont == 0) {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        jTextArea1.setText("No existe esa referencia");
                    } else {
                        card.show(getContentPane(), "card1"); //muestra la primera ventana
                        upd.updateAll(cTexto2.getText(), Integer.parseInt(cTexto3.getText()), Integer.parseInt(cTexto1.getText()), Integer.parseInt(cTexto4.getText()));
                        jTextArea1.setText("Se ha(n) actualizado " + cont + " fila(s).");
                        actualizarTablaAlumnos();
                    }
                } catch (NumberFormatException nfe) {
                    jTextArea1.setText("ERROR: Introduzca solo numeros.");
                }
            }
        }
    }//GEN-LAST:event_bAceptarActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        limpiarTablaAlumnos();
        jTextArea1.setText("");
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void bVerPaisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerPaisesActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tablaPaises.getModel();
        Object[] paises = new Object[2];

        if (dtm.getRowCount() > 1) {
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
            }
        }

        limpiarTablaPaises();
        for (int i = 0; i < query.selectPaises().size(); i++) {
            paises[0] = ((Pais) (query.selectPaises().get(i))).getId_pais();
            paises[1] = ((Pais) (query.selectPaises().get(i))).getNombre_pais();

            if (dtm.getRowCount() < query.selectPaises().size()) {
                dtm.addRow(paises);
            }
        }
    }//GEN-LAST:event_bVerPaisesActionPerformed

    /**
     * Borra el contenido de la tabla paises
     */
    public void limpiarTablaPaises() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) tablaPaises.getModel();

            int rowCount = dtm.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                dtm.removeRow(0);
            }

        } catch (Exception e) {
            jTextArea1.setText("No se pudo limpiar la tabla");
        }
    }

    /**
     * Método main
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paleta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paleta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paleta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paleta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Conexion.conectar();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paleta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane BaseDatos;
    private javax.swing.JButton bAceptar;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bInsert;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bSelect;
    private javax.swing.JButton bSelectAll;
    private javax.swing.JButton bUpdate;
    private javax.swing.JButton bVerPaises;
    private javax.swing.JTextField cTexto1;
    private javax.swing.JTextField cTexto2;
    private javax.swing.JTextField cTexto3;
    private javax.swing.JTextField cTexto4;
    private javax.swing.JTextField cTexto5;
    private javax.swing.JTextField cTexto6;
    private javax.swing.JTextField cTexto7;
    private javax.swing.JTextField cTexto8;
    private javax.swing.JComboBox<String> comboSelect;
    private javax.swing.JComboBox<String> comboUpdate;
    private javax.swing.JLabel desc1;
    private javax.swing.JLabel desc10;
    private javax.swing.JLabel desc11;
    private javax.swing.JLabel desc12;
    private javax.swing.JLabel desc13;
    private javax.swing.JLabel desc14;
    private javax.swing.JLabel desc15;
    private javax.swing.JLabel desc2;
    private javax.swing.JLabel desc3;
    private javax.swing.JLabel desc4;
    private javax.swing.JLabel desc6;
    private javax.swing.JLabel desc7;
    private javax.swing.JLabel desc8;
    private javax.swing.JLabel desc9;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lTitulo;
    private javax.swing.JRadioButton rbSelect;
    private javax.swing.JRadioButton rbUpdate;
    private javax.swing.JTable tablaAlumnos;
    private javax.swing.JTable tablaPaises;
    // End of variables declaration//GEN-END:variables
}
